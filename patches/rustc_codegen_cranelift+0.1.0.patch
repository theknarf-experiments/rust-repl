diff --git a/src/base.rs b/src/base.rs
index e4802e3..e76e431 100644
--- a/src/base.rs
+++ b/src/base.rs
@@ -45,15 +45,7 @@ pub(crate) fn codegen_fn<'tcx>(
     let _timer = tcx.prof.generic_activity_with_arg("codegen fn", &*symbol_name);
 
     let mir = tcx.instance_mir(instance.def);
-    let _mir_guard = crate::PrintOnPanic(|| {
-        let mut buf = Vec::new();
-        with_no_trimmed_paths!({
-            use rustc_middle::mir::pretty;
-            let options = pretty::PrettyPrintMirOptions::from_cli(tcx);
-            pretty::write_mir_fn(tcx, mir, &mut |_, _| Ok(()), &mut buf, options).unwrap();
-        });
-        String::from_utf8_lossy(&buf).into_owned()
-    });
+    let _mir_guard = crate::PrintOnPanic(|| String::new());
 
     // Declare function
     let sig = get_function_sig(tcx, module.target_config().default_call_conv, instance);
diff --git a/src/driver/jit.rs b/src/driver/jit.rs
index 3d33751..7777742 100644
--- a/src/driver/jit.rs
+++ b/src/driver/jit.rs
@@ -32,7 +32,7 @@ fn create_jit_module(tcx: TyCtxt<'_>) -> (UnwindModule<JITModule>, Option<DebugC
     (jit_module, cx)
 }
 
-pub(crate) fn run_jit(tcx: TyCtxt<'_>, jit_args: Vec<String>) -> ! {
+pub fn run_jit(tcx: TyCtxt<'_>, jit_args: Vec<String>) -> i32 {
     if !tcx.sess.opts.output_types.should_codegen() {
         tcx.dcx().fatal("JIT mode doesn't work with `cargo check`");
     }
@@ -117,7 +117,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, jit_args: Vec<String>) -> ! {
     argv.push(std::ptr::null());
 
     let ret = f(args.len() as c_int, argv.as_ptr());
-    std::process::exit(ret);
+    ret
 }
 
 fn codegen_and_compile_fn<'tcx>(
diff --git a/src/driver/mod.rs b/src/driver/mod.rs
index 9f2b7b4..9cce902 100644
--- a/src/driver/mod.rs
+++ b/src/driver/mod.rs
@@ -12,7 +12,7 @@
 
 pub(crate) mod aot;
 #[cfg(feature = "jit")]
-pub(crate) mod jit;
+pub mod jit;
 
 fn predefine_mono_items<'tcx>(
     tcx: TyCtxt<'tcx>,
diff --git a/src/lib.rs b/src/lib.rs
index 835fd9a..b98d865 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -16,28 +16,31 @@
 // tidy-alphabetical-end
 
 #[macro_use]
-extern crate rustc_middle;
-extern crate rustc_abi;
-extern crate rustc_ast;
-extern crate rustc_codegen_ssa;
-extern crate rustc_const_eval;
-extern crate rustc_data_structures;
-extern crate rustc_errors;
-extern crate rustc_fs_util;
-extern crate rustc_hir;
-extern crate rustc_incremental;
-extern crate rustc_index;
-extern crate rustc_metadata;
-extern crate rustc_session;
-extern crate rustc_span;
-extern crate rustc_symbol_mangling;
-extern crate rustc_target;
+pub extern crate rustc_middle;
+pub extern crate rustc_abi;
+pub extern crate rustc_ast;
+pub extern crate rustc_codegen_ssa;
+pub extern crate rustc_const_eval;
+pub extern crate rustc_data_structures;
+pub extern crate rustc_errors;
+pub extern crate rustc_fs_util;
+pub extern crate rustc_hir;
+pub extern crate rustc_incremental;
+pub extern crate rustc_index;
+pub extern crate rustc_metadata;
+pub extern crate rustc_session;
+pub extern crate rustc_span;
+pub extern crate rustc_symbol_mangling;
+pub extern crate rustc_target;
+pub extern crate rustc_interface;
+pub extern crate rustc_passes;
+pub extern crate rustc_driver_impl;
 #[macro_use]
-extern crate tracing;
+pub extern crate tracing;
 
 // This prevents duplicating functions and statics that are already part of the host rustc process.
 #[allow(unused_extern_crates)]
-extern crate rustc_driver;
+pub extern crate rustc_driver;
 
 use std::any::Any;
 use std::env;
@@ -69,7 +72,7 @@
 mod constant;
 mod debuginfo;
 mod discriminant;
-mod driver;
+pub mod driver;
 mod global_asm;
 mod inline_asm;
 mod intrinsics;
@@ -213,10 +216,14 @@ fn codegen_crate(&self, tcx: TyCtxt<'_>) -> Box<dyn Any> {
         });
         if config.jit_mode {
             #[cfg(feature = "jit")]
-            driver::jit::run_jit(tcx, config.jit_args);
-
+            {
+                driver::jit::run_jit(tcx, config.jit_args);
+                return Box::new(());
+            }
             #[cfg(not(feature = "jit"))]
-            tcx.dcx().fatal("jit support was disabled when compiling rustc_codegen_cranelift");
+            {
+                tcx.dcx().fatal("jit support was disabled when compiling rustc_codegen_cranelift");
+            }
         } else {
             driver::aot::run_aot(tcx)
         }
